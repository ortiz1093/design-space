from sklearn.datasets import make_blobs
from sklearn.cluster import AffinityPropagation
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px


def categorize1D(ndarr):
    arr_unq = np.sort(np.unique(ndarr))
    diffs = np.diff(arr_unq)
    three_sigma = 3 * np.std(diffs)
    splits = np.argwhere(diffs > three_sigma)

    labels = ndarr.copy()
    label = 1
    prev = min(arr_unq)-1
    for split in splits:
        labels[np.logical_and(prev < ndarr, ndarr <= arr_unq[split])] = label
        label += 1
        prev = arr_unq[split]
    labels[ndarr > arr_unq[split]] = label

    return labels


X = np.array([27, 24, 17, 16, 20, 50, 23, 37, 45, 38, 31, 32, 32, 16, 35, 40, 27,
       47, 15, 46, 47, 24, 34, 15, 25, 23, 28, 31, 42, 36, 17, 47, 39, 39,
       20, 25, 43, 18, 49, 30, 18, 28, 23, 34, 27, 21, 38, 39, 35, 17, 17,
       28, 22, 27, 50, 48, 29, 35, 50, 26, 44, 19, 46, 18, 24, 24, 31, 44,
       34, 27, 43, 37, 38, 46, 16, 42, 25, 48, 50, 21, 40, 22, 47, 26, 20,
       33, 41, 48, 45, 18, 50, 15, 41, 27, 23, 43, 22, 27, 26, 48, 21, 25,
       28, 48, 49, 34, 35, 26, 41, 27, 37, 17, 28, 38, 26, 39, 36, 41, 35,
       36, 27, 33, 48, 29, 44, 46, 19, 30, 48, 15, 25, 42, 37, 50, 43, 44,
       29, 22, 23, 23, 45, 20, 17, 49, 36, 23, 40, 20, 49, 21, 48, 15, 18,
       50, 26, 27, 15, 29, 30, 23, 40, 49, 33, 34, 16, 39, 36, 48, 28, 39,
       15, 19, 44, 28, 31, 16, 26, 45, 15, 38, 26, 42, 28, 18, 35, 34, 47,
       31, 30, 30, 49, 19, 25, 24, 22, 18, 34, 42, 32, 42, 38, 31, 34, 21,
       29, 32, 45, 22, 16, 47, 22, 35, 33, 22, 40, 44, 36, 19, 16, 50, 25,
       50, 21, 28, 48, 48, 35, 43, 24, 35, 34, 45, 42, 30, 24, 26, 48, 46,
       38, 35, 17, 19, 42, 45, 20, 47, 42, 22, 41, 19, 34, 26, 29, 23, 41,
       42, 27, 36, 36, 29, 17, 16, 42, 19, 30, 28, 32, 21, 50, 49, 17, 49,
       29, 29, 36, 23, 47, 16, 16, 27, 21, 15, 46, 41, 38, 16, 23, 42, 34,
       45, 27, 45, 21, 46, 24, 22, 38, 46, 22, 16, 36, 50, 17, 15, 26, 43,
       26, 21, 35, 31, 22, 34, 45, 15, 18, 34, 48, 45, 36, 50, 34, 26, 35,
       15, 18, 36, 46, 25, 20, 50, 34, 47, 33, 19, 16, 26, 16, 46, 40, 41,
       31, 19, 46, 46, 19, 26, 40, 35, 40, 15, 21, 21, 16, 21, 22, 25, 23,
       21, 47, 21, 47, 30, 17, 32, 23, 30, 15, 47, 32, 28, 20, 36, 33, 35,
       33, 50, 50, 34, 41, 43, 25, 35, 48, 31, 34, 45, 49, 17, 50, 24, 39,
       30, 38, 23, 29, 47, 42, 46, 31, 29, 49, 21, 36, 42, 20, 15, 40, 40,
       41, 24, 37, 30, 33, 18, 50, 34, 22, 32, 19, 50, 40, 22, 40, 43, 43,
       45, 42, 33, 24, 25, 44, 31, 31, 27, 50, 35, 17, 15, 19, 39, 36, 50,
       38, 31, 39, 40, 49, 17, 22, 23, 43, 38, 28, 25, 34, 30, 39, 23, 19,
       20, 38, 21, 38, 18, 29, 48, 44, 22, 21, 24, 44, 27, 34, 35, 49, 33,
       34, 48, 23, 25, 47, 39, 19, 41, 23, 50, 41, 30, 45, 18, 20, 17, 41,
       36, 18, 32, 18, 23, 34, 17, 17, 34, 28, 43, 50, 44, 18, 42, 42, 48,
       46, 32, 18, 38, 23, 42, 50, 26, 18, 39, 33, 16, 49, 33, 27, 36, 19,
       19, 31, 29, 20, 45, 39, 29, 29, 43, 47, 25, 32, 20, 43, 40, 25, 23,
       20, 17, 16, 44, 39, 34, 34, 36, 33, 39, 49, 18, 23, 48, 28, 24, 30,
       27, 39, 18, 48, 35, 47, 28, 17, 34, 46, 47, 35, 35, 19, 23, 22, 29,
       36, 19, 42, 24, 26, 48, 33, 23, 47, 33, 30, 30, 31, 35, 33, 49, 32,
       19, 18, 15, 46, 43, 47, 39, 42, 25, 42, 49, 42, 15, 36, 30, 45, 43,
       21, 17, 25, 43, 38, 32, 45, 30, 39, 32, 15, 27, 46, 47, 33, 43, 22,
       38, 41, 35, 33, 40, 34, 47, 31, 20, 48, 31, 32, 20, 17, 48, 33, 22,
       33, 49, 47, 16, 35, 18, 20, 32, 34, 37, 27, 27, 32, 26, 50, 46, 45,
       17, 39, 18, 35, 46, 24, 34, 38, 39, 20, 42, 31, 30, 40, 44, 23, 48,
       43, 16, 23, 37, 42, 44, 35, 30, 47, 39, 49, 48, 25, 34, 39, 36, 47,
       31, 49, 30, 37, 40, 15, 37, 27, 43, 17, 29, 22, 26, 45, 34, 27, 32,
       49, 48, 37, 18, 48, 27, 20, 16, 18, 29, 41, 36, 37, 18, 27, 20, 35,
       24, 21, 45, 30, 16, 48, 22, 44, 49, 34, 27, 32, 22, 34, 38, 19, 19,
       45, 48, 18, 21, 29, 47, 19, 22, 46, 47, 34, 35, 23, 35, 21, 44, 45,
       39, 34, 45, 38, 20, 15, 32, 22, 19, 15, 23, 18, 30, 29, 24, 22, 35,
       19, 50, 27, 30, 28, 27, 42, 23, 29, 19, 35, 24, 36, 16, 20, 21, 38,
       32, 22, 30, 21, 38, 31, 48, 18, 34, 44, 30, 34, 22, 22, 42, 32, 29,
       43, 41, 49, 30, 20, 46, 43, 20, 17, 39, 25, 31, 38, 38, 46, 41, 15,
       32, 16, 25, 47, 45, 41, 38, 24, 28, 28, 34, 22, 46, 49, 38, 20, 33,
       20, 19, 37, 38, 27, 34, 22, 37, 45, 50, 42, 23, 50, 40, 45, 39, 36,
       45, 17, 29, 39, 46, 16, 22, 37, 17, 23, 35, 40, 34, 29, 43, 29, 27,
       22, 29, 49, 32, 44, 44, 27, 34, 30, 31, 37, 16, 39, 35, 29, 47, 39,
       50, 26, 16, 37, 36, 36, 48, 44, 29, 36, 27, 29, 37, 15, 22, 41, 44,
       27, 43, 32, 22, 27, 45, 37, 40, 19, 47, 39, 33, 20, 39, 18, 35, 30,
       22, 48, 41, 34, 19, 45, 46, 47, 44, 30, 43, 42, 22, 46, 50, 28, 47,
       45, 35, 17, 34, 50, 17, 17, 35, 16, 29, 47, 33, 33, 34, 41, 35, 25,
       26, 30, 43, 28, 32, 46, 47, 49, 47, 46, 36, 18, 21, 32, 31, 49, 38,
       27, 40, 29, 36, 24, 43, 25, 38, 25, 46, 44, 48, 22, 33])
# X = np.random.rand(1, 50)*100

# centers = [[1, 1], [-1, -1], [1, -1]]
# X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5,
#                             random_state=0)

codes = categorize1D(X)
t = np.arange(len(X))

fig = go.Figure()
for code in np.unique(codes):
    idx = codes==code
    fig.add_trace(go.Scatter(x=t[idx], y=X[idx], mode='markers', name=str(code)))

# data = go.Scatter(x=t, y=X, mode='markers', text=codes, colorscale=colors, marker_color=codes)
# fig = go.Figure(data=data)
fig.show()

pass
